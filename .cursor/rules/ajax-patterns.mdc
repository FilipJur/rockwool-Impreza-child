---
description: AJAX patterns using fetch API and WordPress integration
globs: ["src/js/**/*.js", "functions.php"]
alwaysApply: false
---

# AJAX Patterns

## Modern Fetch Instead of jQuery

Use `api` utility for all AJAX requests:

```javascript
// GET request
const data = await api.get('/endpoint');

// POST request  
const result = await api.post('/endpoint', { key: 'value' });

// WordPress AJAX
const wpData = await api.wpAjax('action_name', { 
  data: 'value' 
});
```

## Error Handling

Always wrap in try/catch with user-friendly messages:

```javascript
try {
  const result = await api.wpAjax('custom_action', data);
  // Handle success
} catch (error) {
  const userMessage = api.handleError(error, {
    404: 'Požadovaný zdroj nebyl nalezen',
    500: 'Chyba serveru'
  });
  console.error('API Error:', error);
  // Show userMessage to user
}
```

## WordPress AJAX Setup

Client-side uses `api.wpAjax()`, server-side needs hooks:

```php
// functions.php
add_action('wp_ajax_custom_action', 'handle_custom_action');
add_action('wp_ajax_nopriv_custom_action', 'handle_custom_action');

function handle_custom_action() {
  // Verify nonce
  if (!wp_verify_nonce($_POST['nonce'], 'wp_ajax_nonce')) {
    wp_send_json_error('Invalid nonce');
  }
  
  // Process data
  $result = process_data($_POST['data']);
  
  wp_send_json_success($result);
}
```

## Timeout Handling

For long requests, add timeout:

```javascript
const result = await api.withTimeout(
  api.get('/slow-endpoint'),
  10000 // 10 second timeout
);
```