/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/main.js":
/*!************************************!*\
  !*** ./src/js/main.js + 5 modules ***!
  \************************************/
/***/ (() => {

eval("\n;// ./src/js/utils/dom.js\n/**\n * DOM utility functions\n * Replaces jQuery for common DOM operations\n */\n\nconst dom = {\n  /**\n   * Find element(s) by selector\n   * @param {string} selector - CSS selector\n   * @param {Element} context - Optional context element\n   * @returns {Element|NodeList|null}\n   */\n  find(selector, context = document) {\n    const elements = context.querySelectorAll(selector);\n    return elements.length === 1 ? elements[0] : elements.length > 1 ? elements : null;\n  },\n  /**\n   * Find single element by selector\n   * @param {string} selector - CSS selector\n   * @param {Element} context - Optional context element\n   * @returns {Element|null}\n   */\n  findOne(selector, context = document) {\n    return context.querySelector(selector);\n  },\n  /**\n   * Check if element exists\n   * @param {string} selector - CSS selector\n   * @param {Element} context - Optional context element\n   * @returns {boolean}\n   */\n  exists(selector, context = document) {\n    return context.querySelector(selector) !== null;\n  },\n  /**\n   * Add event listener with optional delegation\n   * @param {Element|string} target - Element or selector\n   * @param {string} event - Event type\n   * @param {Function} handler - Event handler\n   * @param {string} delegate - Optional selector for delegation\n   */\n  on(target, event, handler, delegate = null) {\n    const element = typeof target === 'string' ? this.findOne(target) : target;\n    if (!element) return;\n    if (delegate) {\n      element.addEventListener(event, e => {\n        if (e.target.matches(delegate) || e.target.closest(delegate)) {\n          handler.call(e.target.closest(delegate) || e.target, e);\n        }\n      });\n    } else {\n      element.addEventListener(event, handler);\n    }\n  },\n  /**\n   * Set element text content\n   * @param {Element|string} target - Element or selector\n   * @param {string} text - Text content\n   */\n  text(target, text) {\n    const element = typeof target === 'string' ? this.findOne(target) : target;\n    if (element) element.textContent = text;\n  },\n  /**\n   * Set element HTML content\n   * @param {Element|string} target - Element or selector\n   * @param {string} html - HTML content\n   */\n  html(target, html) {\n    const element = typeof target === 'string' ? this.findOne(target) : target;\n    if (element) element.innerHTML = html;\n  },\n  /**\n   * Set element styles\n   * @param {Element|string} target - Element or selector\n   * @param {Object|string} styles - Style object or property name\n   * @param {string} value - Style value (if styles is string)\n   */\n  css(target, styles, value = null) {\n    const element = typeof target === 'string' ? this.findOne(target) : target;\n    if (!element) return;\n    if (typeof styles === 'object') {\n      Object.assign(element.style, styles);\n    } else if (value !== null) {\n      element.style[styles] = value;\n    }\n  },\n  /**\n   * Get/set element value\n   * @param {Element|string} target - Element or selector\n   * @param {string} value - Value to set (optional)\n   * @returns {string} Current value if getting\n   */\n  val(target, value = null) {\n    const element = typeof target === 'string' ? this.findOne(target) : target;\n    if (!element) return '';\n    if (value !== null) {\n      element.value = value;\n    } else {\n      return element.value || '';\n    }\n  },\n  /**\n   * Add/remove/toggle CSS classes\n   * @param {Element|string} target - Element or selector\n   * @param {string} className - Class name\n   * @param {string} action - 'add', 'remove', or 'toggle'\n   */\n  class(target, className, action = 'add') {\n    const element = typeof target === 'string' ? this.findOne(target) : target;\n    if (!element) return;\n    switch (action) {\n      case 'add':\n        element.classList.add(className);\n        break;\n      case 'remove':\n        element.classList.remove(className);\n        break;\n      case 'toggle':\n        element.classList.toggle(className);\n        break;\n    }\n  },\n  /**\n   * Wait for DOM ready state\n   * @param {Function} callback - Function to execute when ready\n   */\n  ready(callback) {\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', callback);\n    } else {\n      callback();\n    }\n  }\n};\n;// ./src/js/utils/api.js\n/**\n * API utility functions\n * Modern fetch-based AJAX helpers\n */\n\nconst api = {\n  /**\n   * Make GET request\n   * @param {string} url - Request URL\n   * @param {Object} options - Request options\n   * @returns {Promise}\n   */\n  async get(url, options = {}) {\n    return this.request(url, {\n      method: 'GET',\n      ...options\n    });\n  },\n  /**\n   * Make POST request\n   * @param {string} url - Request URL\n   * @param {Object} data - Request data\n   * @param {Object} options - Request options\n   * @returns {Promise}\n   */\n  async post(url, data = {}, options = {}) {\n    return this.request(url, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n  },\n  /**\n   * Generic request handler\n   * @param {string} url - Request URL\n   * @param {Object} options - Fetch options\n   * @returns {Promise}\n   */\n  async request(url, options = {}) {\n    const defaults = {\n      headers: {\n        'Accept': 'application/json'\n      },\n      credentials: 'same-origin'\n    };\n    const config = {\n      ...defaults,\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      } else {\n        return await response.text();\n      }\n    } catch (error) {\n      console.error('API Request failed:', error);\n      throw error;\n    }\n  },\n  /**\n   * WordPress AJAX helper\n   * @param {string} action - WordPress AJAX action\n   * @param {Object} data - Request data\n   * @param {Object} options - Request options\n   * @returns {Promise}\n   */\n  async wpAjax(action, data = {}, options = {}) {\n    const url = window.wpAjax?.ajaxurl || '/wp-admin/admin-ajax.php';\n    const nonce = window.wpAjax?.nonce || '';\n    const formData = new FormData();\n    formData.append('action', action);\n    formData.append('nonce', nonce);\n    Object.keys(data).forEach(key => {\n      formData.append(key, data[key]);\n    });\n    return this.request(url, {\n      method: 'POST',\n      body: formData,\n      ...options\n    });\n  },\n  /**\n   * Handle API errors with user-friendly messages\n   * @param {Error} error - Error object\n   * @param {Object} messages - Custom error messages\n   * @returns {string} User-friendly error message\n   */\n  handleError(error, messages = {}) {\n    const defaultMessages = {\n      404: 'Požadovaný zdroj nebyl nalezen',\n      400: 'Chybný formát požadavku',\n      500: 'Chyba serveru',\n      503: 'Služba je dočasně nedostupná',\n      network: 'Chyba připojení k internetu',\n      timeout: 'Požadavek vypršel',\n      default: 'Nastala neočekávaná chyba'\n    };\n    const errorMessages = {\n      ...defaultMessages,\n      ...messages\n    };\n    if (error.message.includes('HTTP 404')) {\n      return errorMessages[404];\n    } else if (error.message.includes('HTTP 400')) {\n      return errorMessages[400];\n    } else if (error.message.includes('HTTP 500')) {\n      return errorMessages[500];\n    } else if (error.message.includes('HTTP 503')) {\n      return errorMessages[503];\n    } else if (error.name === 'TypeError' && error.message.includes('fetch')) {\n      return errorMessages.network;\n    } else if (error.name === 'AbortError') {\n      return errorMessages.timeout;\n    } else {\n      return errorMessages.default;\n    }\n  },\n  /**\n   * Add request timeout\n   * @param {Promise} request - Request promise\n   * @param {number} timeout - Timeout in milliseconds\n   * @returns {Promise}\n   */\n  withTimeout(request, timeout = 10000) {\n    return Promise.race([request, new Promise((_, reject) => setTimeout(() => reject(new Error('Request timeout')), timeout))]);\n  }\n};\n;// ./src/js/utils/validation.js\n/**\n * Form validation utilities\n * Czech-specific validation rules\n */\n\nconst validation = {\n  /**\n   * Validate Czech IČO (company registration number)\n   * @param {string} ico - IČO to validate\n   * @returns {Object} Validation result\n   */\n  ico(ico) {\n    const cleaned = ico.replace(/\\s/g, '');\n    if (!/^\\d{8}$/.test(cleaned)) {\n      return {\n        valid: false,\n        error: 'IČO musí mít 8 číslic'\n      };\n    }\n\n    // Czech IČO checksum validation\n    const digits = cleaned.split('').map(Number);\n    const weights = [8, 7, 6, 5, 4, 3, 2];\n    const sum = digits.slice(0, 7).reduce((acc, digit, index) => acc + digit * weights[index], 0);\n    const remainder = sum % 11;\n    const checksum = remainder < 2 ? remainder : 11 - remainder;\n    if (digits[7] !== checksum) {\n      return {\n        valid: false,\n        error: 'Neplatné IČO (chybný kontrolní součet)'\n      };\n    }\n    return {\n      valid: true\n    };\n  },\n  /**\n   * Validate email address\n   * @param {string} email - Email to validate\n   * @returns {Object} Validation result\n   */\n  email(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return {\n        valid: false,\n        error: 'Neplatný formát e-mailové adresy'\n      };\n    }\n    return {\n      valid: true\n    };\n  },\n  /**\n   * Validate Czech phone number\n   * @param {string} phone - Phone to validate\n   * @returns {Object} Validation result\n   */\n  phone(phone) {\n    const cleaned = phone.replace(/[\\s\\-\\(\\)]/g, '');\n    const phoneRegex = /^(\\+420)?[0-9]{9}$/;\n    if (!phoneRegex.test(cleaned)) {\n      return {\n        valid: false,\n        error: 'Neplatný formát telefonního čísla'\n      };\n    }\n    return {\n      valid: true\n    };\n  },\n  /**\n   * Validate required field\n   * @param {string} value - Value to validate\n   * @param {string} fieldName - Field name for error message\n   * @returns {Object} Validation result\n   */\n  required(value, fieldName = 'Pole') {\n    if (!value || value.trim() === '') {\n      return {\n        valid: false,\n        error: `${fieldName} je povinné`\n      };\n    }\n    return {\n      valid: true\n    };\n  },\n  /**\n   * Validate file type\n   * @param {File} file - File to validate\n   * @param {Array} allowedTypes - Allowed MIME types\n   * @returns {Object} Validation result\n   */\n  fileType(file, allowedTypes = ['image/jpeg', 'image/jpg', 'image/png']) {\n    if (!allowedTypes.includes(file.type)) {\n      const allowedExtensions = allowedTypes.map(type => {\n        switch (type) {\n          case 'image/jpeg':\n            return 'JPG';\n          case 'image/jpg':\n            return 'JPG';\n          case 'image/png':\n            return 'PNG';\n          default:\n            return type;\n        }\n      });\n      return {\n        valid: false,\n        error: `Pouze soubory typu ${allowedExtensions.join(', ')} jsou povoleny`\n      };\n    }\n    return {\n      valid: true\n    };\n  },\n  /**\n   * Validate file size\n   * @param {File} file - File to validate\n   * @param {number} maxSize - Maximum size in bytes\n   * @returns {Object} Validation result\n   */\n  fileSize(file, maxSize = 5 * 1024 * 1024) {\n    // 5MB default\n    if (file.size > maxSize) {\n      const maxSizeMB = Math.round(maxSize / (1024 * 1024));\n      return {\n        valid: false,\n        error: `Soubor je příliš velký (maximum ${maxSizeMB}MB)`\n      };\n    }\n    return {\n      valid: true\n    };\n  },\n  /**\n   * Format file size for display\n   * @param {number} bytes - File size in bytes\n   * @returns {string} Formatted size string\n   */\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  },\n  /**\n   * Validate multiple rules for a single value\n   * @param {any} value - Value to validate\n   * @param {Array} rules - Array of validation rules\n   * @returns {Object} Validation result\n   */\n  validate(value, rules) {\n    for (const rule of rules) {\n      const result = rule(value);\n      if (!result.valid) {\n        return result;\n      }\n    }\n    return {\n      valid: true\n    };\n  }\n};\n;// ./src/js/modules/ares-handler.js\n/**\n * ARES Company Data Handler\n * Handles Czech company registration data lookup and form population\n */\n\n\n\n\nclass AresHandler {\n  constructor() {\n    this.form = null;\n    this.fields = {\n      ico: null,\n      companyName: null,\n      address: null,\n      status: null,\n      loadButton: null\n    };\n    this.lastFetchedIco = null;\n    this.isInitialized = false;\n    this.init();\n  }\n\n  /**\n   * Initialize the ARES handler\n   */\n  init() {\n    dom.ready(() => {\n      this.setupElements();\n      if (this.isValidSetup()) {\n        this.bindEvents();\n        this.isInitialized = true;\n        console.log('ARES Handler initialized successfully');\n      }\n    });\n  }\n\n  /**\n   * Set up DOM elements and validate they exist\n   */\n  setupElements() {\n    this.form = dom.findOne('.registration-form');\n    if (!this.form) {\n      console.warn('Registration form container \".registration-form\" not found.');\n      return;\n    }\n    this.fields = {\n      ico: dom.findOne('[name=\"ico\"]', this.form),\n      companyName: dom.findOne('[name=\"company-name\"]', this.form),\n      address: dom.findOne('[name=\"address\"]', this.form),\n      status: dom.findOne('#aresStatus', this.form),\n      loadButton: dom.findOne('#loadAresData', this.form)\n    };\n  }\n\n  /**\n   * Validate that all required elements are present\n   * @returns {boolean}\n   */\n  isValidSetup() {\n    const requiredFields = ['ico', 'companyName', 'address', 'status', 'loadButton'];\n    const missingFields = requiredFields.filter(field => !this.fields[field]);\n    if (missingFields.length > 0) {\n      console.warn(`ARES Handler: Missing required fields: ${missingFields.join(', ')}`);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Bind event listeners\n   */\n  bindEvents() {\n    // Load ARES data button click\n    dom.on(this.fields.loadButton, 'click', e => {\n      e.preventDefault();\n      this.loadAresData();\n    });\n\n    // IČO field input change\n    dom.on(this.fields.ico, 'input', () => {\n      this.handleIcoChange();\n    });\n\n    // Enter key in IČO field\n    dom.on(this.fields.ico, 'keypress', e => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        this.loadAresData();\n      }\n    });\n  }\n\n  /**\n   * Load company data from ARES API\n   */\n  async loadAresData() {\n    const ico = dom.val(this.fields.ico).trim();\n\n    // Validate IČO format\n    const icoValidation = validation.ico(ico);\n    if (!icoValidation.valid) {\n      this.showError(icoValidation.error);\n      this.clearFields();\n      return;\n    }\n    this.showStatus('Ověřuji IČO...', 'loading');\n    this.clearFields();\n    this.lastFetchedIco = null;\n    try {\n      const data = await api.withTimeout(api.get(`https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty/${ico}`), 15000 // 15 second timeout\n      );\n      this.handleAresSuccess(data, ico);\n    } catch (error) {\n      this.handleAresError(error);\n    }\n  }\n\n  /**\n   * Handle successful ARES API response\n   * @param {Object} data - ARES API response data\n   * @param {string} ico - The IČO that was looked up\n   */\n  handleAresSuccess(data, ico) {\n    if (data && data.obchodniJmeno) {\n      dom.val(this.fields.companyName, data.obchodniJmeno);\n      if (data.sidlo && data.sidlo.textovaAdresa) {\n        dom.val(this.fields.address, data.sidlo.textovaAdresa);\n      }\n      this.showStatus('Údaje načteny', 'success');\n      this.lastFetchedIco = ico;\n    } else {\n      this.showError('Společnost nenalezena nebo odpověď neobsahuje název');\n    }\n  }\n\n  /**\n   * Handle ARES API errors\n   * @param {Error} error - Error object\n   */\n  handleAresError(error) {\n    const errorMessages = {\n      404: 'IČO nebylo nalezeno v ARES',\n      400: 'Chybný formát IČO pro ARES (zkontrolujte)',\n      500: 'Služba ARES je dočasně nedostupná. Zkuste později',\n      503: 'Služba ARES je dočasně nedostupná. Zkuste později',\n      timeout: 'Požadavek na ARES vypršel. Zkuste později',\n      network: 'Chyba připojení k ARES API',\n      default: 'Chyba při komunikaci s ARES API'\n    };\n    const errorMessage = api.handleError(error, errorMessages);\n    this.showError(errorMessage);\n    console.error('ARES API Error:', error);\n  }\n\n  /**\n   * Handle changes to the IČO field\n   */\n  handleIcoChange() {\n    const currentIco = dom.val(this.fields.ico).trim();\n    const hasCompanyData = dom.val(this.fields.companyName) !== '' || dom.val(this.fields.address) !== '';\n    if (this.lastFetchedIco && currentIco !== this.lastFetchedIco && hasCompanyData) {\n      this.showStatus('IČO bylo změněno. Klikněte na \"Načíst údaje\" pro aktualizaci', 'warning');\n    } else if (!this.lastFetchedIco && hasCompanyData && currentIco !== '') {\n      this.showStatus('Zadejte IČO a klikněte na \"Načíst údaje\"', 'info');\n    } else if (currentIco === '' && this.lastFetchedIco) {\n      this.clearStatus();\n      this.lastFetchedIco = null;\n    }\n  }\n\n  /**\n   * Show status message\n   * @param {string} message - Status message\n   * @param {string} type - Status type: 'loading', 'success', 'error', 'warning', 'info'\n   */\n  showStatus(message, type = 'info') {\n    const colors = {\n      loading: '#ff9500',\n      success: '#4CAF50',\n      error: '#f44336',\n      warning: '#ff9500',\n      info: '#2196F3'\n    };\n    dom.text(this.fields.status, message);\n    dom.css(this.fields.status, 'color', colors[type] || colors.info);\n  }\n\n  /**\n   * Show error message\n   * @param {string} message - Error message\n   */\n  showError(message) {\n    this.showStatus(message, 'error');\n  }\n\n  /**\n   * Clear status message\n   */\n  clearStatus() {\n    dom.text(this.fields.status, '');\n    dom.css(this.fields.status, 'color', '');\n  }\n\n  /**\n   * Clear company data fields\n   */\n  clearFields() {\n    dom.val(this.fields.companyName, '');\n    dom.val(this.fields.address, '');\n  }\n\n  /**\n   * Check if handler is properly initialized\n   * @returns {boolean}\n   */\n  isReady() {\n    return this.isInitialized;\n  }\n\n  /**\n   * Destroy the handler and clean up event listeners\n   */\n  destroy() {\n    // Note: In a full implementation, you'd want to track and remove specific event listeners\n    // For now, this is a placeholder for cleanup functionality\n    this.isInitialized = false;\n    this.lastFetchedIco = null;\n    console.log('ARES Handler destroyed');\n  }\n}\n;// ./src/js/modules/file-upload.js\n/**\n * Enhanced File Upload Handler\n * Provides drag & drop functionality for Contact Form 7 file uploads\n */\n\n\n\nclass FileUpload {\n  constructor() {\n    // Singleton pattern\n    if (FileUpload.instance) {\n      return FileUpload.instance;\n    }\n    this.fileInput = null;\n    this.originalContainer = null;\n    this.customContainer = null;\n    this.previewContainer = null;\n    this.errorContainer = null;\n    this.selectedFiles = [];\n    this.config = {\n      maxFileSize: 5 * 1024 * 1024,\n      // 5MB\n      allowedTypes: ['image/jpeg', 'image/jpg', 'image/png'],\n      allowedExtensions: ['.jpg', '.jpeg', '.png']\n    };\n    this.isInitialized = false;\n    FileUpload.instance = this;\n    this.init();\n  }\n\n  /**\n   * Initialize the file upload handler\n   */\n  init() {\n    dom.ready(() => {\n      this.setup();\n    });\n  }\n\n  /**\n   * Set up the enhanced file upload interface\n   */\n  setup() {\n    this.fileInput = dom.findOne('.registration-form input[name=\"fotky-realizace\"]');\n    if (!this.fileInput) {\n      console.warn('File input not found');\n      return;\n    }\n    this.originalContainer = this.fileInput.closest('.wpcf7-form-control-wrap');\n    if (!this.originalContainer) {\n      console.warn('File input container not found');\n      return;\n    }\n    this.cleanup();\n    this.createCustomInterface();\n    this.bindEvents();\n    this.syncWithOriginalInput();\n    this.isInitialized = true;\n    console.log('Enhanced File Upload initialized successfully');\n  }\n\n  /**\n   * Create the custom drag & drop interface\n   */\n  createCustomInterface() {\n    // Create upload zone\n    this.customContainer = document.createElement('div');\n    this.customContainer.className = 'file-upload-zone';\n\n    // File icon SVG\n    const iconSvg = this.createFileIcon();\n    const uploadText = document.createElement('div');\n    uploadText.className = 'file-upload-text';\n    uploadText.textContent = 'Přetáhněte fotky sem nebo\\\\nklikněte pro nahrání';\n    this.customContainer.innerHTML = iconSvg;\n    this.customContainer.appendChild(uploadText);\n\n    // Create preview container\n    this.previewContainer = document.createElement('div');\n    this.previewContainer.className = 'file-preview-container';\n    const previewList = document.createElement('div');\n    previewList.className = 'file-preview-list';\n    this.previewContainer.appendChild(previewList);\n\n    // Create error container\n    this.errorContainer = document.createElement('div');\n    this.errorContainer.className = 'file-upload-error';\n\n    // Insert before original container\n    const parent = this.originalContainer.parentNode;\n    parent.insertBefore(this.customContainer, this.originalContainer);\n    parent.insertBefore(this.previewContainer, this.originalContainer);\n    parent.insertBefore(this.errorContainer, this.originalContainer);\n    this.hideOriginalElements();\n  }\n\n  /**\n   * Create file icon SVG\n   * @returns {string} SVG markup\n   */\n  createFileIcon() {\n    return `<svg class=\"file-upload-icon\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M3.55556 32C2.57778 32 1.74104 31.6521 1.04533 30.9564C0.34963 30.2607 0.00118519 29.4234 0 28.4444V3.55556C0 2.57778 0.348445 1.74104 1.04533 1.04533C1.74222 0.34963 2.57896 0.00118519 3.55556 0H28.4444C29.4222 0 30.2596 0.348445 30.9564 1.04533C31.6533 1.74222 32.0012 2.57896 32 3.55556V28.4444C32 29.4222 31.6521 30.2596 30.9564 30.9564C30.2607 31.6533 29.4234 32.0012 28.4444 32H3.55556ZM3.55556 28.4444H28.4444V3.55556H3.55556V28.4444ZM5.33333 24.8889H26.6667L20 16L14.6667 23.1111L10.6667 17.7778L5.33333 24.8889Z\" fill=\"#CCCCCC\"/>\n    </svg>`;\n  }\n\n  /**\n   * Hide original form elements\n   */\n  hideOriginalElements() {\n    const br = this.originalContainer.nextElementSibling;\n    if (br && br.tagName === 'BR') {\n      br.style.display = 'none';\n      const small = br.nextElementSibling;\n      if (small && small.tagName === 'SMALL') {\n        small.style.display = 'none';\n      }\n    }\n  }\n\n  /**\n   * Show original form elements\n   */\n  showOriginalElements() {\n    if (!this.originalContainer) return;\n    const br = this.originalContainer.nextElementSibling;\n    if (br && br.tagName === 'BR') {\n      br.style.display = '';\n      const small = br.nextElementSibling;\n      if (small && small.tagName === 'SMALL') {\n        small.style.display = '';\n      }\n    }\n  }\n\n  /**\n   * Bind event listeners\n   */\n  bindEvents() {\n    // Click to upload\n    dom.on(this.customContainer, 'click', () => {\n      this.fileInput.click();\n    });\n\n    // File input change\n    dom.on(this.fileInput, 'change', e => {\n      this.handleFileSelection(e.target.files);\n    });\n\n    // Drag and drop events\n    this.bindDragDropEvents();\n\n    // Prevent default drag behaviors globally\n    this.preventDefaultDragBehaviors();\n  }\n\n  /**\n   * Bind drag and drop event listeners\n   */\n  bindDragDropEvents() {\n    dom.on(this.customContainer, 'dragover', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      dom.class(this.customContainer, 'drag-over', 'add');\n    });\n    dom.on(this.customContainer, 'dragleave', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      if (!this.customContainer.contains(e.relatedTarget)) {\n        dom.class(this.customContainer, 'drag-over', 'remove');\n      }\n    });\n    dom.on(this.customContainer, 'drop', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      dom.class(this.customContainer, 'drag-over', 'remove');\n      const files = Array.from(e.dataTransfer.files);\n      this.setFilesToInput(files);\n    });\n  }\n\n  /**\n   * Prevent default drag behaviors on document\n   */\n  preventDefaultDragBehaviors() {\n    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n      document.addEventListener(eventName, e => {\n        e.preventDefault();\n        e.stopPropagation();\n      }, false);\n    });\n  }\n\n  /**\n   * Set files to the original input element\n   * @param {FileList|Array} files - Files to set\n   */\n  setFilesToInput(files) {\n    if (!files || files.length === 0) return;\n    try {\n      if (typeof DataTransfer !== 'undefined') {\n        const dt = new DataTransfer();\n        Array.from(files).forEach(file => {\n          dt.items.add(file);\n        });\n        this.fileInput.files = dt.files;\n        this.fileInput.dispatchEvent(new Event('change', {\n          bubbles: true\n        }));\n      } else {\n        this.showError('Drag and drop není podporován v tomto prohlížeči. Použijte tlačítko pro výběr souborů.');\n      }\n    } catch (error) {\n      console.warn('DataTransfer not supported:', error);\n      this.showError('Drag and drop není podporován. Použijte tlačítko pro výběr souborů.');\n    }\n  }\n\n  /**\n   * Handle file selection (both click and drag & drop)\n   * @param {FileList} files - Selected files\n   */\n  handleFileSelection(files) {\n    this.clearErrors();\n    this.selectedFiles = [];\n    if (!files || files.length === 0) {\n      this.updatePreviewVisibility();\n      return;\n    }\n    const validFiles = [];\n    const errors = [];\n    Array.from(files).forEach(file => {\n      const fileValidation = this.validateFile(file);\n      if (fileValidation.valid) {\n        validFiles.push(file);\n      } else {\n        errors.push(`${file.name}: ${fileValidation.error}`);\n      }\n    });\n    if (errors.length > 0) {\n      this.showError(errors.join('<br>'));\n    }\n    if (validFiles.length > 0) {\n      this.addFiles(validFiles);\n    }\n    this.updatePreviewVisibility();\n  }\n\n  /**\n   * Validate a single file\n   * @param {File} file - File to validate\n   * @returns {Object} Validation result\n   */\n  validateFile(file) {\n    // File type validation\n    const typeValidation = validation.fileType(file, this.config.allowedTypes);\n    if (!typeValidation.valid) {\n      return typeValidation;\n    }\n\n    // File size validation\n    const sizeValidation = validation.fileSize(file, this.config.maxFileSize);\n    if (!sizeValidation.valid) {\n      return sizeValidation;\n    }\n    return {\n      valid: true\n    };\n  }\n\n  /**\n   * Add files to the preview\n   * @param {Array} files - Valid files to add\n   */\n  addFiles(files) {\n    files.forEach(file => {\n      const fileData = {\n        file: file,\n        id: Date.now() + Math.random(),\n        name: file.name,\n        size: file.size,\n        status: 'selected'\n      };\n      this.selectedFiles.push(fileData);\n      this.createFilePreview(fileData);\n    });\n  }\n\n  /**\n   * Create preview element for a file\n   * @param {Object} fileData - File data object\n   */\n  createFilePreview(fileData) {\n    const previewItem = document.createElement('div');\n    previewItem.className = 'file-preview-item';\n    previewItem.dataset.fileId = fileData.id;\n\n    // Thumbnail\n    const thumbnail = document.createElement('div');\n    thumbnail.className = 'file-preview-thumbnail';\n    if (fileData.file.type.startsWith('image/')) {\n      const img = document.createElement('img');\n      const reader = new FileReader();\n      reader.onload = e => {\n        img.src = e.target.result;\n      };\n      reader.readAsDataURL(fileData.file);\n      thumbnail.appendChild(img);\n    } else {\n      thumbnail.innerHTML = '📄';\n    }\n\n    // File info\n    const info = document.createElement('div');\n    info.className = 'file-preview-info';\n    const name = document.createElement('div');\n    name.className = 'file-preview-name';\n    name.textContent = fileData.name;\n    const size = document.createElement('div');\n    size.className = 'file-preview-size';\n    size.textContent = validation.formatFileSize(fileData.size);\n    const status = document.createElement('div');\n    status.className = 'file-preview-status';\n    status.textContent = 'Připraven k nahrání';\n    info.appendChild(name);\n    info.appendChild(size);\n    info.appendChild(status);\n    previewItem.appendChild(thumbnail);\n    previewItem.appendChild(info);\n    const previewList = dom.findOne('.file-preview-list', this.previewContainer);\n    previewList.appendChild(previewItem);\n  }\n\n  /**\n   * Sync with original input changes (e.g., from WPCF7 validation)\n   */\n  syncWithOriginalInput() {\n    const observer = new MutationObserver(() => {\n      if (this.fileInput.files && this.fileInput.files.length === 0) {\n        this.selectedFiles = [];\n        const previewList = dom.findOne('.file-preview-list', this.previewContainer);\n        if (previewList) {\n          previewList.innerHTML = '';\n        }\n        this.updatePreviewVisibility();\n      }\n    });\n    observer.observe(this.fileInput, {\n      attributes: true,\n      attributeFilter: ['value']\n    });\n  }\n\n  /**\n   * Update preview container visibility\n   */\n  updatePreviewVisibility() {\n    if (this.selectedFiles.length > 0) {\n      dom.class(this.previewContainer, 'has-files', 'add');\n    } else {\n      dom.class(this.previewContainer, 'has-files', 'remove');\n    }\n  }\n\n  /**\n   * Show error message\n   * @param {string} message - Error message\n   */\n  showError(message) {\n    dom.html(this.errorContainer, message);\n    dom.class(this.errorContainer, 'show', 'add');\n    dom.class(this.customContainer, 'has-error', 'add');\n    setTimeout(() => {\n      this.clearErrors();\n    }, 5000);\n  }\n\n  /**\n   * Clear error messages\n   */\n  clearErrors() {\n    dom.class(this.errorContainer, 'show', 'remove');\n    dom.class(this.customContainer, 'has-error', 'remove');\n  }\n\n  /**\n   * Reset the upload interface\n   */\n  reset() {\n    this.selectedFiles = [];\n    const previewList = dom.findOne('.file-preview-list', this.previewContainer);\n    if (previewList) {\n      previewList.innerHTML = '';\n    }\n    this.updatePreviewVisibility();\n    this.clearErrors();\n  }\n\n  /**\n   * Clean up and remove custom elements\n   */\n  cleanup() {\n    if (this.customContainer && this.customContainer.parentNode) {\n      this.customContainer.parentNode.removeChild(this.customContainer);\n    }\n    if (this.previewContainer && this.previewContainer.parentNode) {\n      this.previewContainer.parentNode.removeChild(this.previewContainer);\n    }\n    if (this.errorContainer && this.errorContainer.parentNode) {\n      this.errorContainer.parentNode.removeChild(this.errorContainer);\n    }\n    if (this.originalContainer) {\n      this.showOriginalElements();\n    }\n    this.customContainer = null;\n    this.previewContainer = null;\n    this.errorContainer = null;\n    this.selectedFiles = [];\n  }\n\n  /**\n   * Check if handler is properly initialized\n   * @returns {boolean}\n   */\n  isReady() {\n    return this.isInitialized;\n  }\n\n  /**\n   * Handle WPCF7 form submission success\n   */\n  onFormSuccess() {\n    setTimeout(() => {\n      this.reset();\n    }, 100);\n  }\n\n  /**\n   * Clear singleton instance\n   */\n  static clearInstance() {\n    if (FileUpload.instance) {\n      FileUpload.instance.cleanup();\n      FileUpload.instance = null;\n    }\n  }\n\n  /**\n   * Destroy the handler\n   */\n  destroy() {\n    this.cleanup();\n    this.isInitialized = false;\n    console.log('Enhanced File Upload destroyed');\n  }\n}\n;// ./src/js/main.js\n/**\n * Main JavaScript Entry Point\n * Imports and initializes all modules for the theme\n */\n\n\n\n\n\n/**\n * Theme Application Class\n * Manages initialization and lifecycle of all modules\n */\nclass ThemeApp {\n  constructor() {\n    this.modules = {\n      aresHandler: null,\n      fileUpload: null\n    };\n    this.isInitialized = false;\n    this.init();\n  }\n\n  /**\n   * Initialize the application\n   */\n  init() {\n    dom.ready(() => {\n      this.initializeModules();\n      this.bindGlobalEvents();\n      this.isInitialized = true;\n      console.log('Theme application initialized successfully');\n    });\n  }\n\n  /**\n   * Initialize all modules\n   */\n  initializeModules() {\n    // Initialize ARES handler for company data lookup\n    if (dom.exists('.registration-form')) {\n      try {\n        this.modules.aresHandler = new AresHandler();\n        console.log('ARES handler initialized');\n      } catch (error) {\n        console.error('Failed to initialize ARES handler:', error);\n      }\n    }\n\n    // Initialize enhanced file upload\n    if (dom.exists('.registration-form input[name=\"fotky-realizace\"]')) {\n      try {\n        this.modules.fileUpload = new FileUpload();\n        console.log('File upload handler initialized');\n      } catch (error) {\n        console.error('Failed to initialize file upload handler:', error);\n      }\n    }\n  }\n\n  /**\n   * Bind global event listeners\n   */\n  bindGlobalEvents() {\n    // Handle Contact Form 7 submission success\n    if (typeof window.wpcf7 !== 'undefined') {\n      document.addEventListener('wpcf7mailsent', event => {\n        this.handleFormSuccess(event);\n      });\n      document.addEventListener('wpcf7invalid', event => {\n        this.handleFormError(event);\n      });\n      document.addEventListener('wpcf7spam', event => {\n        this.handleFormSpam(event);\n      });\n      document.addEventListener('wpcf7mailfailed', event => {\n        this.handleFormFailed(event);\n      });\n    }\n\n    // Handle dynamic content loading (if needed for AJAX)\n    document.addEventListener('DOMContentLoaded', () => {\n      this.reinitializeOnDynamicContent();\n    });\n  }\n\n  /**\n   * Handle successful form submission\n   * @param {Event} event - WPCF7 event\n   */\n  handleFormSuccess(event) {\n    console.log('Form submitted successfully');\n\n    // Reset file upload interface\n    if (this.modules.fileUpload && this.modules.fileUpload.isReady()) {\n      this.modules.fileUpload.onFormSuccess();\n    }\n\n    // You can add more success handling here\n    // e.g., analytics tracking, user notifications, etc.\n  }\n\n  /**\n   * Handle form validation errors\n   * @param {Event} event - WPCF7 event\n   */\n  handleFormError(event) {\n    console.log('Form validation failed');\n    // Add custom error handling if needed\n  }\n\n  /**\n   * Handle spam detection\n   * @param {Event} event - WPCF7 event\n   */\n  handleFormSpam(event) {\n    console.log('Form marked as spam');\n    // Add custom spam handling if needed\n  }\n\n  /**\n   * Handle mail sending failure\n   * @param {Event} event - WPCF7 event\n   */\n  handleFormFailed(event) {\n    console.log('Form mail sending failed');\n    // Add custom failure handling if needed\n  }\n\n  /**\n   * Reinitialize modules when content is dynamically loaded\n   * Useful for AJAX-loaded content\n   */\n  reinitializeOnDynamicContent() {\n    // Observer for dynamically added content\n    const observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n          // Check if any added nodes contain forms that need our modules\n          const hasRegistrationForm = Array.from(mutation.addedNodes).some(node => {\n            return node.nodeType === Node.ELEMENT_NODE && (node.matches('.registration-form') || node.querySelector('.registration-form'));\n          });\n          if (hasRegistrationForm) {\n            console.log('Dynamic content detected, reinitializing modules');\n            this.reinitializeModules();\n          }\n        }\n      });\n    });\n\n    // Start observing\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  /**\n   * Reinitialize modules (useful for dynamic content)\n   */\n  reinitializeModules() {\n    // Clean up existing modules\n    this.destroyModules();\n\n    // Reinitialize\n    this.initializeModules();\n  }\n\n  /**\n   * Destroy all modules\n   */\n  destroyModules() {\n    Object.keys(this.modules).forEach(key => {\n      if (this.modules[key] && typeof this.modules[key].destroy === 'function') {\n        this.modules[key].destroy();\n      }\n      this.modules[key] = null;\n    });\n\n    // Clear singleton instances\n    FileUpload.clearInstance();\n  }\n\n  /**\n   * Get module instance\n   * @param {string} moduleName - Name of the module\n   * @returns {Object|null} Module instance\n   */\n  getModule(moduleName) {\n    return this.modules[moduleName] || null;\n  }\n\n  /**\n   * Check if application is ready\n   * @returns {boolean}\n   */\n  isReady() {\n    return this.isInitialized;\n  }\n\n  /**\n   * Destroy the application\n   */\n  destroy() {\n    this.destroyModules();\n    this.isInitialized = false;\n    console.log('Theme application destroyed');\n  }\n}\n\n// Initialize the application\nconst app = new ThemeApp();\n\n// Make app available globally for debugging and external access\nwindow.ThemeApp = app;\n\n// For development debugging\nif (true) {\n  window.ThemeAppDebug = {\n    app,\n    modules: app.modules,\n    dom: dom\n    // Add other utilities for debugging\n  };\n}\n\n//# sourceURL=webpack:///./src/js/main.js_+_5_modules?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/main.js"]();
/******/ 	
/******/ })()
;